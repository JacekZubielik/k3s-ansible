---
- name: "Update and upgrade Debian packages"
  block:
    - name: "Gather service facts"
      ansible.builtin.service_facts:

    - name: "Ensure /etc/apt/apt.conf.d/00aptproxy exists with correct content"
      ansible.builtin.template:
        src: apt-cacher.conf.j2
        dest: /etc/apt/apt.conf.d/00aptproxy
        mode: '0644'
      register: aptproxy_check
      loop: "{{ hostvars[inventory_hostname]['groups']['node'] }}"

    - name: "Ensure non-free repository is enabled"
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list
        line: "deb http://deb.debian.org/debian/ bookworm main contrib non-free
          non-free-firmware"
        state: present

    - name: "Update apt repository cache"
      ansible.builtin.apt:
        update_cache: true

    - name: "Install required packages"
      ansible.builtin.apt:
        pkg:
          - cryptsetup
          - dnsutils
          - firmware-misc-nonfree
          - iotop
          - iperf
          - iptables
          - jq
          - mc
          - neofetch
          - nfs-common
          - nmap
          - open-iscsi
          - parted
          - qemu-guest-agent
          - util-linux
          - vim
        state: present

    - name: "Ensure neofetch exists with correct content"
      ansible.builtin.lineinfile:
        path: /home/ansible/.bashrc
        line: "neofetch"
        state: present

    - name: "Upgrade all packages to the latest version"
      ansible.builtin.apt:
        upgrade: true


- name: "Check system"
  block:
    - name: "Check status of qemu-guest-agent"
      ansible.builtin.shell: >
        systemctl is-active qemu-guest-agent
      register: qga_status
      changed_when: false
      check_mode: no

    - name: "Start qemu-guest-agent if it is not running"
      ansible.builtin.systemd:
        name: qemu-guest-agent
        enabled: true
        state: started
      when: qga_status.stdout != 'active'

    - name: "Ensure iscsi_tcp is present in /etc/modules"
      ansible.builtin.lineinfile:
        path: /etc/modules
        line: 'iscsi_tcp'
        state: present
      when: "'iscsi_tcp' in ansible_facts.services and ansible_facts.services['iscsi_tcp'].state != 'running'"

    - name: "Remove nfs-common service file"
      ansible.builtin.file:
        path: /lib/systemd/system/nfs-common.service
        state: absent

    - name: "Reload systemd daemon"
      ansible.builtin.systemd:
        daemon_reload: true

    - name: "Check if nfs-common is installed"
      ansible.builtin.command: systemctl is-active nfs-common || echo "inactive"
      register: nfs_status

    - name: "Start the systemd service for nfs-common if it is not started"
      ansible.builtin.systemd:
        name: nfs-common
        enabled: true
        state: started
      when: qga_status.stdout != 'active'

    - name: "Load iscsi_tcp kernel module"
      community.general.modprobe:
        name: iscsi_tcp
        state: present
      loop: "{{ hostvars[inventory_hostname]['groups']['node'] }}"

    - name: "Check if iscsi_tcp module is loaded"
      ansible.builtin.shell: >
        lsmod | grep -q iscsi_tcp
      register: iscsi_tcp_loaded
      failed_when: false
      changed_when: false
      check_mode: false

    - name: "Debug iscsi_tcp module status"
      ansible.builtin.debug:
        msg: "iscsi_tcp module is {{ 'loaded' if iscsi_tcp_loaded.rc == 0 else 'not loaded' }}"

    # - name: "Check if iscsid is installed"
    #   ansible.builtin.command: >
    #     systemctl is-active iscsid || echo "inactive"
    #   register: iscsid_status

    # - name: "Start the systemd service for iscsid if it is not started"
    #   ansible.builtin.systemd:
    #     name: iscsid
    #     enabled: true
    #     state: started
    #   when: iscsid_status.stdout != 'active'

    - name: "Check if iscsid is installed"
      ansible.builtin.systemd:
        name: iscsid
        state: started
        enabled: true
      register: iscsid_status
      check_mode: yes  # Optional: Use this if you want to check without making changes

    - name: "Start the systemd service for iscsid if it is not started"
      ansible.builtin.systemd:
        name: iscsid
        enabled: true
        state: started
      when: iscsid_status.status != 'active'






    - name: "Check if a reboot is required"
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: "Reboot the server if required"
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible for package updates"
      when: reboot_required_file.stat.exists

    - name: "Autoremove unnecessary packages"
      ansible.builtin.apt:
        autoremove: true

  rescue:
    - name: "Handle any errors in block"
      ansible.builtin.debug:
        msg: "An error occurred in the block."
